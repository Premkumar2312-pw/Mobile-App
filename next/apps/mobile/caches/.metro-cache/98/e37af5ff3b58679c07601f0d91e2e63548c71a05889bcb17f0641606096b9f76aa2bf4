{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"],"imports":1}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"DEFAULT_ACTION_IDENTIFIER\", {\n    enumerable: true,\n    get: function () {\n      return DEFAULT_ACTION_IDENTIFIER;\n    }\n  });\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.removeNotificationSubscription = removeNotificationSubscription;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _NotificationsEmitterModule = require(_dependencyMap[2], \"./NotificationsEmitterModule\");\n  var NotificationsEmitterModule = _interopDefault(_NotificationsEmitterModule);\n  var _utilsMapNotificationResponse = require(_dependencyMap[3], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  var emitter = new _expoModulesCore.LegacyEventEmitter(NotificationsEmitterModule.default);\n  var didReceiveNotificationEventName = 'onDidReceiveNotification';\n  var didDropNotificationsEventName = 'onNotificationsDeleted';\n  var didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  var didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  var DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      var mappedNotification = (0, _utilsMapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      var mappedResponse = (0, _utilsMapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   * @deprecated call `remove()` on the subscription object instead.\n   *\n   * Removes a notification subscription returned by an `addNotificationListener` call.\n   * @param subscription A subscription returned by `addNotificationListener` method.\n   * @header listen\n   */\n  function removeNotificationSubscription(subscription) {\n    console.warn('`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.');\n    if (typeof subscription?.remove === 'function') {\n      subscription.remove();\n    } else {\n      throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n    }\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponseAsync() {\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function _getLastNotificationResponseAsync() {\n    _getLastNotificationResponseAsync = (0, _asyncToGenerator.default)(function* () {\n      return getLastNotificationResponse();\n    });\n    return _getLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function getLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    var response = NotificationsEmitterModule.default.getLastNotificationResponse();\n    var mappedResponse = response ? (0, _utilsMapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @return A promise that resolves if the native call was successful.\n   */\n  function clearLastNotificationResponseAsync() {\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function _clearLastNotificationResponseAsync() {\n    _clearLastNotificationResponseAsync = (0, _asyncToGenerator.default)(function* () {\n      clearLastNotificationResponse();\n    });\n    return _clearLastNotificationResponseAsync.apply(this, arguments);\n  }\n  function clearLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":202,"map":[[12,2,11,0,"Object"],[12,8,11,0],[12,9,11,0,"defineProperty"],[12,23,11,0],[12,24,11,0,"exports"],[12,31,11,0],[13,4,11,0,"enumerable"],[13,14,11,0],[14,4,11,0,"get"],[14,7,11,0],[14,18,11,0,"get"],[14,19,11,0],[15,6,11,0],[15,13,11,0,"DEFAULT_ACTION_IDENTIFIER"],[15,38,11,0],[16,4,11,0],[17,2,11,0],[18,2,36,0,"exports"],[18,9,36,0],[18,10,36,0,"addNotificationReceivedListener"],[18,41,36,0],[18,44,36,0,"addNotificationReceivedListener"],[18,75,36,0],[19,2,50,0,"exports"],[19,9,50,0],[19,10,50,0,"addNotificationsDroppedListener"],[19,41,50,0],[19,44,50,0,"addNotificationsDroppedListener"],[19,75,50,0],[20,2,79,0,"exports"],[20,9,79,0],[20,10,79,0,"addNotificationResponseReceivedListener"],[20,49,79,0],[20,52,79,0,"addNotificationResponseReceivedListener"],[20,91,79,0],[21,2,92,0,"exports"],[21,9,92,0],[21,10,92,0,"removeNotificationSubscription"],[21,40,92,0],[21,43,92,0,"removeNotificationSubscription"],[21,73,92,0],[22,2,108,0,"exports"],[22,9,108,0],[22,10,108,0,"getLastNotificationResponseAsync"],[22,42,108,0],[22,45,108,0,"getLastNotificationResponseAsync"],[22,77,108,0],[23,2,118,0,"exports"],[23,9,118,0],[23,10,118,0,"getLastNotificationResponse"],[23,37,118,0],[23,40,118,0,"getLastNotificationResponse"],[23,67,118,0],[24,2,136,0,"exports"],[24,9,136,0],[24,10,136,0,"clearLastNotificationResponseAsync"],[24,44,136,0],[24,47,136,0,"clearLastNotificationResponseAsync"],[24,81,136,0],[25,2,148,0,"exports"],[25,9,148,0],[25,10,148,0,"clearLastNotificationResponse"],[25,39,148,0],[25,42,148,0,"clearLastNotificationResponse"],[25,71,148,0],[26,2,159,0,"exports"],[26,9,159,0],[26,10,159,0,"addNotificationResponseClearedListener"],[26,48,159,0],[26,51,159,0,"addNotificationResponseClearedListener"],[26,89,159,0],[27,2,161,1],[27,6,161,1,"_babelRuntimeHelpersAsyncToGenerator"],[27,42,161,1],[27,45,161,1,"require"],[27,52,161,1],[27,53,161,1,"_dependencyMap"],[27,67,161,1],[28,2,161,1],[28,6,161,1,"_asyncToGenerator"],[28,23,161,1],[28,26,161,1,"_interopDefault"],[28,41,161,1],[28,42,161,1,"_babelRuntimeHelpersAsyncToGenerator"],[28,78,161,1],[29,2,1,0],[29,6,1,0,"_expoModulesCore"],[29,22,1,0],[29,25,1,0,"require"],[29,32,1,0],[29,33,1,0,"_dependencyMap"],[29,47,1,0],[30,2,2,0],[30,6,2,0,"_NotificationsEmitterModule"],[30,33,2,0],[30,36,2,0,"require"],[30,43,2,0],[30,44,2,0,"_dependencyMap"],[30,58,2,0],[31,2,2,0],[31,6,2,0,"NotificationsEmitterModule"],[31,32,2,0],[31,35,2,0,"_interopDefault"],[31,50,2,0],[31,51,2,0,"_NotificationsEmitterModule"],[31,78,2,0],[32,2,3,0],[32,6,3,0,"_utilsMapNotificationResponse"],[32,35,3,0],[32,38,3,0,"require"],[32,45,3,0],[32,46,3,0,"_dependencyMap"],[32,60,3,0],[33,2,4,0],[34,2,5,0],[34,6,5,6,"emitter"],[34,13,5,13],[34,16,5,16],[34,20,5,20,"LegacyEventEmitter"],[34,36,5,38],[34,37,5,38,"LegacyEventEmitter"],[34,55,5,38],[34,56,5,39,"NotificationsEmitterModule"],[34,82,5,65],[34,83,5,65,"default"],[34,90,5,65],[34,91,5,66],[35,2,6,0],[35,6,6,6,"didReceiveNotificationEventName"],[35,37,6,37],[35,40,6,40],[35,66,6,66],[36,2,7,0],[36,6,7,6,"didDropNotificationsEventName"],[36,35,7,35],[36,38,7,38],[36,62,7,62],[37,2,8,0],[37,6,8,6,"didReceiveNotificationResponseEventName"],[37,45,8,45],[37,48,8,48],[37,82,8,82],[38,2,9,0],[38,6,9,6,"didClearNotificationResponseEventName"],[38,43,9,43],[38,46,9,46],[38,78,9,78],[39,2,10,0],[40,2,11,7],[40,6,11,13,"DEFAULT_ACTION_IDENTIFIER"],[40,31,11,38],[40,34,11,41],[40,78,11,85],[41,2,12,0],[42,0,13,0],[43,0,14,0],[44,0,15,0],[45,0,16,0],[46,0,17,0],[47,0,18,0],[48,0,19,0],[49,0,20,0],[50,0,21,0],[51,0,22,0],[52,0,23,0],[53,0,24,0],[54,0,25,0],[55,0,26,0],[56,0,27,0],[57,0,28,0],[58,0,29,0],[59,0,30,0],[60,0,31,0],[61,0,32,0],[62,0,33,0],[63,0,34,0],[64,0,35,0],[65,2,36,7],[65,11,36,16,"addNotificationReceivedListener"],[65,42,36,47,"addNotificationReceivedListener"],[65,43,36,48,"listener"],[65,51,36,56],[65,53,36,58],[66,4,37,4],[66,11,37,11,"emitter"],[66,18,37,18],[66,19,37,19,"addListener"],[66,30,37,30],[66,31,37,31,"didReceiveNotificationEventName"],[66,62,37,62],[66,64,37,65,"notification"],[66,76,37,77],[66,80,37,82],[67,6,38,8],[67,10,38,14,"mappedNotification"],[67,28,38,32],[67,31,38,35],[67,35,38,35,"mapNotification"],[67,64,38,50],[67,65,38,50,"mapNotification"],[67,80,38,50],[67,82,38,51,"notification"],[67,94,38,63],[67,95,38,64],[68,6,39,8,"listener"],[68,14,39,16],[68,15,39,17,"mappedNotification"],[68,33,39,35],[68,34,39,36],[69,4,40,4],[69,5,40,5],[69,6,40,6],[70,2,41,0],[71,2,42,0],[72,0,43,0],[73,0,44,0],[74,0,45,0],[75,0,46,0],[76,0,47,0],[77,0,48,0],[78,0,49,0],[79,2,50,7],[79,11,50,16,"addNotificationsDroppedListener"],[79,42,50,47,"addNotificationsDroppedListener"],[79,43,50,48,"listener"],[79,51,50,56],[79,53,50,58],[80,4,51,4],[80,11,51,11,"emitter"],[80,18,51,18],[80,19,51,19,"addListener"],[80,30,51,30],[80,31,51,31,"didDropNotificationsEventName"],[80,60,51,60],[80,62,51,62,"listener"],[80,70,51,70],[80,71,51,71],[81,2,52,0],[82,2,53,0],[83,0,54,0],[84,0,55,0],[85,0,56,0],[86,0,57,0],[87,0,58,0],[88,0,59,0],[89,0,60,0],[90,0,61,0],[91,0,62,0],[92,0,63,0],[93,0,64,0],[94,0,65,0],[95,0,66,0],[96,0,67,0],[97,0,68,0],[98,0,69,0],[99,0,70,0],[100,0,71,0],[101,0,72,0],[102,0,73,0],[103,0,74,0],[104,0,75,0],[105,0,76,0],[106,0,77,0],[107,0,78,0],[108,2,79,7],[108,11,79,16,"addNotificationResponseReceivedListener"],[108,50,79,55,"addNotificationResponseReceivedListener"],[108,51,79,56,"listener"],[108,59,79,64],[108,61,79,66],[109,4,80,4],[109,11,80,11,"emitter"],[109,18,80,18],[109,19,80,19,"addListener"],[109,30,80,30],[109,31,80,31,"didReceiveNotificationResponseEventName"],[109,70,80,70],[109,72,80,73,"response"],[109,80,80,81],[109,84,80,86],[110,6,81,8],[110,10,81,14,"mappedResponse"],[110,24,81,28],[110,27,81,31],[110,31,81,31,"mapNotificationResponse"],[110,60,81,54],[110,61,81,54,"mapNotificationResponse"],[110,84,81,54],[110,86,81,55,"response"],[110,94,81,63],[110,95,81,64],[111,6,82,8,"listener"],[111,14,82,16],[111,15,82,17,"mappedResponse"],[111,29,82,31],[111,30,82,32],[112,4,83,4],[112,5,83,5],[112,6,83,6],[113,2,84,0],[114,2,85,0],[115,0,86,0],[116,0,87,0],[117,0,88,0],[118,0,89,0],[119,0,90,0],[120,0,91,0],[121,2,92,7],[121,11,92,16,"removeNotificationSubscription"],[121,41,92,46,"removeNotificationSubscription"],[121,42,92,47,"subscription"],[121,54,92,59],[121,56,92,61],[122,4,93,4,"console"],[122,11,93,11],[122,12,93,12,"warn"],[122,16,93,16],[122,17,93,17],[122,104,93,104],[122,105,93,105],[123,4,94,4],[123,8,94,8],[123,15,94,15,"subscription"],[123,27,94,27],[123,29,94,29,"remove"],[123,35,94,35],[123,40,94,40],[123,50,94,50],[123,52,94,52],[124,6,95,8,"subscription"],[124,18,95,20],[124,19,95,21,"remove"],[124,25,95,27],[124,26,95,28],[124,27,95,29],[125,4,96,4],[125,5,96,5],[125,11,97,9],[126,6,98,8],[126,12,98,14],[126,16,98,18,"Error"],[126,21,98,23],[126,22,98,24],[126,95,98,97,"subscription"],[126,107,98,109],[126,109,98,111],[126,110,98,112],[127,4,99,4],[128,2,100,0],[129,2,101,0],[130,0,102,0],[131,0,103,0],[132,0,104,0],[133,0,105,0],[134,0,106,0],[135,0,107,0],[136,2,101,0],[136,11,108,22,"getLastNotificationResponseAsync"],[136,43,108,54,"getLastNotificationResponseAsync"],[136,44,108,54],[137,4,108,54],[137,11,108,54,"_getLastNotificationResponseAsync"],[137,44,108,54],[137,45,108,54,"apply"],[137,50,108,54],[137,57,108,54,"arguments"],[137,66,108,54],[138,2,108,54],[139,2,111,0],[140,0,112,0],[141,0,113,0],[142,0,114,0],[143,0,115,0],[144,0,116,0],[145,0,117,0],[146,2,111,0],[146,11,111,0,"_getLastNotificationResponseAsync"],[146,45,111,0],[147,4,111,0,"_getLastNotificationResponseAsync"],[147,37,111,0],[147,44,111,0,"_asyncToGenerator"],[147,61,111,0],[147,62,111,0,"default"],[147,69,111,0],[147,71,108,7],[147,84,108,57],[148,6,109,4],[148,13,109,11,"getLastNotificationResponse"],[148,40,109,38],[148,41,109,39],[148,42,109,40],[149,4,110,0],[149,5,110,1],[150,4,110,1],[150,11,110,1,"_getLastNotificationResponseAsync"],[150,44,110,1],[150,45,110,1,"apply"],[150,50,110,1],[150,57,110,1,"arguments"],[150,66,110,1],[151,2,110,1],[152,2,118,7],[152,11,118,16,"getLastNotificationResponse"],[152,38,118,43,"getLastNotificationResponse"],[152,39,118,43],[152,41,118,46],[153,4,119,4],[153,8,119,8],[153,9,119,9,"NotificationsEmitterModule"],[153,35,119,35],[153,36,119,35,"default"],[153,43,119,35],[153,44,119,36,"getLastNotificationResponse"],[153,71,119,63],[153,73,119,65],[154,6,120,8],[154,12,120,14],[154,16,120,18,"UnavailabilityError"],[154,32,120,37],[154,33,120,37,"UnavailabilityError"],[154,52,120,37],[154,53,120,38],[154,72,120,57],[154,74,120,59],[154,103,120,88],[154,104,120,89],[155,4,121,4],[156,4,122,4],[156,8,122,10,"response"],[156,16,122,18],[156,19,122,21,"NotificationsEmitterModule"],[156,45,122,47],[156,46,122,47,"default"],[156,53,122,47],[156,54,122,48,"getLastNotificationResponse"],[156,81,122,75],[156,82,122,76],[156,83,122,77],[157,4,123,4],[157,8,123,10,"mappedResponse"],[157,22,123,24],[157,25,123,27,"response"],[157,33,123,35],[157,36,123,38],[157,40,123,38,"mapNotificationResponse"],[157,69,123,61],[157,70,123,61,"mapNotificationResponse"],[157,93,123,61],[157,95,123,62,"response"],[157,103,123,70],[157,104,123,71],[157,107,123,74,"response"],[157,115,123,82],[158,4,124,4],[158,11,124,11,"mappedResponse"],[158,25,124,25],[159,2,125,0],[160,2,126,0],[161,0,127,0],[162,0,128,0],[163,0,129,0],[164,0,130,0],[165,0,131,0],[166,0,132,0],[167,0,133,0],[168,0,134,0],[169,0,135,0],[170,2,126,0],[170,11,136,22,"clearLastNotificationResponseAsync"],[170,45,136,56,"clearLastNotificationResponseAsync"],[170,46,136,56],[171,4,136,56],[171,11,136,56,"_clearLastNotificationResponseAsync"],[171,46,136,56],[171,47,136,56,"apply"],[171,52,136,56],[171,59,136,56,"arguments"],[171,68,136,56],[172,2,136,56],[173,2,139,0],[174,0,140,0],[175,0,141,0],[176,0,142,0],[177,0,143,0],[178,0,144,0],[179,0,145,0],[180,0,146,0],[181,0,147,0],[182,2,139,0],[182,11,139,0,"_clearLastNotificationResponseAsync"],[182,47,139,0],[183,4,139,0,"_clearLastNotificationResponseAsync"],[183,39,139,0],[183,46,139,0,"_asyncToGenerator"],[183,63,139,0],[183,64,139,0,"default"],[183,71,139,0],[183,73,136,7],[183,86,136,59],[184,6,137,4,"clearLastNotificationResponse"],[184,35,137,33],[184,36,137,34],[184,37,137,35],[185,4,138,0],[185,5,138,1],[186,4,138,1],[186,11,138,1,"_clearLastNotificationResponseAsync"],[186,46,138,1],[186,47,138,1,"apply"],[186,52,138,1],[186,59,138,1,"arguments"],[186,68,138,1],[187,2,138,1],[188,2,148,7],[188,11,148,16,"clearLastNotificationResponse"],[188,40,148,45,"clearLastNotificationResponse"],[188,41,148,45],[188,43,148,48],[189,4,149,4],[189,8,149,8],[189,9,149,9,"NotificationsEmitterModule"],[189,35,149,35],[189,36,149,35,"default"],[189,43,149,35],[189,44,149,36,"clearLastNotificationResponse"],[189,73,149,65],[189,75,149,67],[190,6,150,8],[190,12,150,14],[190,16,150,18,"UnavailabilityError"],[190,32,150,37],[190,33,150,37,"UnavailabilityError"],[190,52,150,37],[190,53,150,38],[190,72,150,57],[190,74,150,59],[190,105,150,90],[190,106,150,91],[191,4,151,4],[192,4,152,4,"NotificationsEmitterModule"],[192,30,152,30],[192,31,152,30,"default"],[192,38,152,30],[192,39,152,31,"clearLastNotificationResponse"],[192,68,152,60],[192,69,152,61],[192,70,152,62],[193,4,153,4],[194,4,154,4,"emitter"],[194,11,154,11],[194,12,154,12,"emit"],[194,16,154,16],[194,17,154,17,"didClearNotificationResponseEventName"],[194,54,154,54],[194,56,154,56],[194,58,154,58],[194,59,154,59],[195,2,155,0],[196,2,156,0],[197,0,157,0],[198,0,158,0],[199,2,159,7],[199,11,159,16,"addNotificationResponseClearedListener"],[199,49,159,54,"addNotificationResponseClearedListener"],[199,50,159,55,"listener"],[199,58,159,63],[199,60,159,65],[200,4,160,4],[200,11,160,11,"emitter"],[200,18,160,18],[200,19,160,19,"addListener"],[200,30,160,30],[200,31,160,31,"didClearNotificationResponseEventName"],[200,68,160,68],[200,70,160,70,"listener"],[200,78,160,78],[200,79,160,79],[201,2,161,0],[202,0,161,1],[202,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKQ;CLQ;OMQ;CNE;OOQ;CPO;OQW;CRE;OSU;CTO;OUI;CVE"},"hasCjsExports":false},"type":"js/module"}]}